import os, sys
import numpy as np

name = 'tdlmc'
seed = 1113 # random seed
bnn_prior_class = 'EmpiricalBNNPrior'
n_data = 200 # number of images to generate
train_vs_val = 'train'
out_dir = os.path.join('out_data', '{:s}_{:s}_{:s}_seed{:d}'.format(name,
                                                                    train_vs_val,
                                                                    bnn_prior_class,
                                                                    seed))
components = ['lens_mass', 'external_shear', 'src_light', 'lens_light', 'agn_light']

selection = dict(
                 magnification=dict(
                                    min=2.0))

instrument = dict(
              pixel_scale=0.08, # scale (in arcseonds) of pixels
              ccd_gain=4.5, # electrons/ADU (analog-to-digital unit). A gain of 8 means that the camera digitizes the CCD signal so that each ADU corresponds to 8 photoelectrons.
              read_noise=10, # std of noise generated by read-out (in units of electrons)
              )

bandpass = dict(
                magnitude_zero_point=25.9463, # (effectively, the throuput) magnitude in which 1 count per second per arcsecond square is registered (in ADUs)
                )

observation = dict(
                  exposure_time=100.0, # exposure time per image (in seconds)
                  sky_brightness=20.1, # sky brightness (in magnitude per square arcseconds)
                  num_exposures=10, # number of exposures that are combined
                  background_noise=0.25, # overrides exposure_time, sky_brightness, read_noise, num_exposures
                  )

psf = dict(
           type='PIXEL', # string, type of PSF ('GAUSSIAN' and 'PIXEL' supported)
           kernel_size=91, # dimension of provided PSF kernel, only valid when profile='PIXEL'
           fwhm=0.1, # # full width at half maximum of the PSF (if not specific psf_model is specified)
           which_psf_maps=None, # None if rotate among all available PSF maps, else seed number of the map to generate all images with that map
           )

numerics = dict(
                supersampling_factor=1)

image = dict(
             num_pix=100, # cutout pixel size
             inverse=False, # if True, coord sys is ra to the left, if False, to the right 
             )

bnn_omega = dict(
                 # Inference hyperparameters defining the cosmology
                 cosmology = dict(
                                  H0=70.0, # Hubble constant at z = 0. If a float, must be in [km/sec/Mpc]
                                  Om0=0.3, # Omega matter: density of non-relativistic matter in units of the critical density at z=0.
                                  Ode0=0.7, # Omega dark energy: density of dark energy in units of the critical density at z=0.
                                  w0=-1.0), # Dark energy equation of state at all redshifts. This is pressure/density for dark energy in units where c=1. A cosmological constant has w0=-1.0.

                 redshift = dict(
                                model='differential_comoving_volume',
                                # Grid of redshift to sample from
                                grid = dict(
                                            start=0.01, # min redshift
                                            stop=5.0, # max redshift
                                            step=0.1, # resolution of the z_grid
                                            ),
                                ),

                 kinematics = dict(
                                   # Grid of velocity dispersion to sample from
                                   velocity_dispersion = dict(
                                                              model = 'CPV2007', # one of ['CPV2007',] -- see docstring for details 
                                                              grid = dict(
                                                                         start=100.0, # km/s
                                                                         stop=400.0, # km/s
                                                                         step=10.0, # km/s
                                                                         ),
                                                              )
                 )